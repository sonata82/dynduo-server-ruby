= dynduo-server-ruby

A simple server which serves data about users, projects and skills.

{<img src="https://travis-ci.org/sonata82/dynduo-server-ruby.svg?branch=master" alt="Build Status" />}[https://travis-ci.org/sonata82/dynduo-server-ruby]
{<img src="https://coveralls.io/repos/github/sonata82/dynduo-server-ruby/badge.svg?branch=master" alt="Coverage Status" />}[https://coveralls.io/github/sonata82/dynduo-server-ruby?branch=master] 
{<img src="https://img.shields.io/badge/watched%20by-depfu-blue.svg" alt="Depfu" />}[https://depfu.com]

== System dependencies
* ruby 2.2
* Rails 4.1.x

== How to run the test suite
Use rake:

    rake test

== Deployment instructions

=== Production using OpenShift
Start docker container to use `rhc`:

    docker run --rm --name rhc -ti \
        -v ~/.openshift:/root/.openshift \
        -v ~/.ssh:/private \
        bigm/rhc bash

To deploy app to OpenShift, add remote URL to your repository:

    git remote add openshift ssh://553c0c15fcf933ed0300011b@rubyserver-dynduo.rhcloud.com/~/git/rubyserver.git/

Push code to OpenShift repository, initiating deployment:

    git push openshift master

=== Production using Heroku
Start docker container to use `heroku` and create a new app:

    docker run --rm -e HEROKU_API_KEY="insert-your-key-here" wingrunr21/alpine-heroku-cli create

To deploy app, add remote URL to your repository:

    git remote add heroku https://git.heroku.com/some-name-59273.git

Push code to Heroku, initiating deployment:

    git push heroku master

=== Test using Docker
Start a database image:

    docker run --name website-postgres \
        -e POSTGRES_PASSWORD=changeit \
        -e POSTGRES_DB=website-test \
        -d postgres:9.6

Cd into the project directory and create a new container with a link to your database:

    docker run --name website-test \
        -p 8080:3000 \
        -d \
        -w /usr/src/app/website \
        -v "$PWD:/usr/src/app/website" \
        -e RAILS_ENV=test \
        -e AUTH_USERNAME=admin \
        -e AUTH_PASSWORD=admin \
        --link website-postgres:postgres \
        website

Now run:

    docker exec -i website-test rake

=== Development using Docker
To build the image, cd into the project directory and use:

    docker build -t website:latest .

Now you can start the container:

    docker run --name website \
        -p 8080:3000 \
        -d \
        -w /usr/src/app/website \
        -v "$PWD:/usr/src/app/website" \
        website

To use rails:

    docker exec -i website rails

After adding a gem:

    docker run -it --rm -v "$PWD:/usr/src/app/website" -w /usr/src/app/website website bundle
    docker build -t website:latest .

